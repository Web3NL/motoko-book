type User = 
 record {
   balance: nat;
   id: nat;
   lastLike: int;
   lastPost: int;
   likes: List;
 };
type QueryComment = 
 record {
   comment: text;
   created: int;
   hash: CommentHash;
   reward: nat;
   userId: text;
 };
type PostResult = 
 variant {
   err: PostError;
   ok;
 };
type PostError = 
 variant {
   AnonNotAllowed;
   InvalidComment;
   TimeRemaining: int;
 };
type List = 
 opt record {
       CommentHash;
       List;
     };
type LikeResult = 
 variant {
   err: LikeError;
   ok: nat;
 };
type LikeError = 
 variant {
   AlreadyLiked;
   AnonNotAllowed;
   TimeRemaining: int;
 };
type CommentHash__1 = nat32;
type CommentHash = nat32;
service : {
  latestComments: () -> (vec QueryComment) query;
  likeComment: (CommentHash__1) -> (LikeResult);
  postComment: (text) -> (PostResult);
  tokenTreasury: () -> (nat) query;
  user: () -> (opt User) query;
}
